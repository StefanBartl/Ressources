display: flex changes an element to a block-level container with flex items inside of it.
display: inline-flex allows multiple flex containers to appear inline with each other.
justify-content is used to space items along the main axis.
align-items is used to space items along the cross axis.
flex-grow is used to specify how much space (and in what proportions) flex items absorb along the main axis.
flex-shrink is used to specify how much flex items shrink and in what proportions along the main axis.
flex-basis is used to specify the initial size of an element styled with flex-grow and/or flex-shrink.
flex is used to specify flex-grow, flex-shrink, and flex-basis in one declaration.
flex-wrap specifies that elements should shift along the cross axis if the flex container is not large enough.
align-content is used to space rows along the cross axis.
flex-direction is used to specify the main and cross axes.
flex-flow is used to specify flex-wrap and flex-direction in one declaration.
Flex containers can be nested inside of each other by declaring display: flex or display: inline-flex for children of flex containers.

Grid:
Als erstes einen Container - Display: grid setzen, WIDTH! dann -->
.grid {
  display: grid;
  width: 500px;
  grid-template-columns: 100px 200px;
}
This property creates two changes. First, it defines the number of columns in the grid; in this case, there are two. Second, it sets the width of each column. The first column will be 100 pixels wide and the second column will be 200 pixels wide.
We can also define the size of our columns as a percentage of the entire grid’s width.
.grid {
  display: grid;
  width: 1000px;
  grid-template-columns: 20% 50%;
}
 To specify the number and size of the rows, we are going to use the property grid-template-rows.
This property is almost identical to grid-template-columns.  HEIGHT!
.grid {
  display: grid;
  width: 1000px;
  height: 500px;
  grid-template-columns: 100px 200px;
  grid-template-rows: 10% 20% 600px;
}
The shorthand property, grid-template, can replace the previous two CSS properties. 
Both grid-template-rows and grid-template-columns are nowhere to be found in the following code!
.grid {
  display: grid;
  width: 1000px;
  height: 500px;
  grid-template: 200px 300px / 20% 10% 70%;
}
When using grid-template, the values before the slash will determine the size of each row. The values after the slash determine the size of each column. In this example, we’ve made two rows and three columns of varying sizes.
The same rules from before apply; when using percentages to set rows, each row will be a percentage of the grid’s total height. Columns are still a percentage of the total width.

By using the fr unit, we can define the size of columns and rows as a fraction of the grid’s length and width. This unit was specifically created for use in CSS Grid. Using fr makes it easier to prevent grid items from overflowing the boundaries of the grid. Consider the code below:

.grid {
  display: grid;
  width: 1000px;
  height: 400px;
  grid-template: 2fr 1fr 1fr / 1fr 3fr 1fr;
}

In this example, the grid will have three rows and three columns. The rows are splitting up the available 400 pixels of height into four parts. The first row gets two of those parts, the second row gets one, and the third row gets one
. Therefore the first row is 200 pixels tall, and the second and third rows are 100 pixels tall.
Each column’s width is a fraction of the available space. In this case, the available space is split into five parts. The first column gets one-fifth of the space, the second column gets three-fifths, and the last column gets one-fifth. Since the total width is 1000 pixels, this means that the columns will have widths of 200 pixels, 600 pixels, and 200 pixels respectively.


minmax
So far, all of the grids that we have worked with have been a fixed size. The grid in our example has been 400 pixels wide and 500 pixels tall. But sometimes you might want a grid to resize based on the size of your web browser.
In these situations, you might want to prevent a row or column from getting too big or too small. For example, if you have a 100-pixel wide image in your grid, you probably don’t want its column to get thinner than 100 pixels! The minmax() function can help us solve this problem.
.grid {
  display: grid;
  grid-template-columns: 100px minmax(100px, 500px) 100px;
}
In this example, the first and third columns will always be 100 pixels wide, no matter the size of the grid. The second column, however, will vary in size as the overall grid resizes. The second column will always be between 100 and 500 pixels wide.


Grid Gap
In all of our grids so far, there hasn’t been any space between the items in our grid. The CSS properties row-gap and column-gap will put blank space between every row and column in the grid.
.grid {
  display: grid;
  width: 320px;
  grid-template-columns: repeat(3, 1fr);
  column-gap: 10px;
}
Finally, there is a shorthand CSS property, gap, that can set the row and column gap at the same time.
.grid {
  display: grid;
  width: 320px;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px 10px;
}
The example above will set the distance between rows to 20 pixels and the distance between columns to 10 pixels. Unlike other CSS grid properties, this shorthand does not take a / between values! If only one value is given, it will set the column gap and the row gap to that value.

Multiple Row Items
Using the CSS properties grid-row-start and grid-row-end, we can make single grid items take up multiple rows. Remember, we are no longer applying CSS to the outer grid container; we’re adding CSS to the elements sitting inside the grid!
<!DOCTYPE html>
<html>
<head>
  <link rel='stylesheet' href='style.css'></head>
  
<body>
  <div class="grid">
    <div class="box a">A</div>
  </div>
</body>
</html>

.item {
  grid-row-start: 1;
  grid-row-end: 3;
}
In this example, the HTML element of class item will take up two rows in the grid, rows 1 and 2. The values that grid-row-start and grid-row-end accept are grid lines.

Row grid lines and column grid lines start at 1 and end at a value that is 1 greater than the number of rows or columns the grid has. For example, if a grid has 5 rows, the grid row lines range from 1 to 6. If a grid has 8 rows, the grid row lines range from 1 to 9.

The value for grid-row-start should be the row at which you want the grid item to begin. The value for grid-row-end should be one greater than the row at which you want the grid item to end. An element that covers rows 2, 3, and 4 should have these declarations: grid-row-start: 2 and grid-row-end: 5.

It is possible for the value of grid-row-start to be greater than that of grid-row-end. Both properties can also each have negative values. Consult the documentation to learn more about how to use these features.

We can use the property grid-row as shorthand for grid-row-start and grid-row-end. The following two code blocks will produce the same output:
.item {
  grid-row-start: 4;
  grid-row-end: 6;
} --->
.item {
  grid-row: 4 / 6;
}
Grid Column
The previous three properties also exist for columns. grid-column-start, grid-column-end and grid-column work identically to the row properties. These properties allow a grid item to span multiple columns.

Span
.item {
  grid-column: 4 / span 2;
}
This is telling the item element to begin in column four and take up two columns of space. So item would occupy columns four and five.

Grid Area
We’ve already been able to use grid-row and grid-column as shorthand for properties like grid-row-start and grid-row-end. We can refactor even more using the property grid-area. This property will set the starting and ending positions for both the rows and columns of an item.
.item {
  grid-area: 2 / 3 / 4 / span 5;
}
grid-area takes four values separated by slashes. The order is important! This is how grid-area will interpret those values.

grid-row-start
grid-column-start
grid-row-end
grid-column-end

In the above example, the item will occupy rows two and three and columns three through eight.
Using grid-area is an easy way to place items exactly where you want them in a grid.


CSS TRANSITIONS
Duration
To create a simple transition in CSS, we must specify two of the four aspects:

The property that we want to transition.
The duration of the transition.

a {
  transition-property: color;
  transition-duration: 1s;
}

In the example above, transition-property declares which CSS property we will be transitioning, the text color. The second property, transition-duration, declares how long the transition will take — one second.

Many properties’ state changes can be transitioned. The type of transition depends on the property you choose.
Different properties transition in different ways, for example:

Color values, like color and background-color, will blend to a new color.
Length values like font-size, width, and height will grow or shrink.
Duration is specified in seconds or milliseconds, such as 3s, 0.75s, 500ms. The default value is 0s, or instantaneous, as if there is no transition.

When choosing a duration, think about how long actions take in real life. For example, a human eye blink takes around 400ms. People might expect the animation of clicking a button to be as sudden as a blink.

Timing Function
The next transition property is transition-timing-function. The timing function describes the pace of the transition.

The default value is ease, which starts the transition slowly, speeds up in the middle, and slows down again at the end.

Other valid values include:

ease-in — starts slow, accelerates quickly, stops abruptly
ease-out — begins abruptly, slows down, and ends slowly
ease-in-out — starts slow, gets fast in the middle, and ends slowly
linear — constant speed throughout

transition-property: color;
transition-duration: 1s;
transition-timing-function: ease-out;
In the example above, the text color will be animated over one second. The timing function is ease-out which means it will begin abruptly and slow down as it ends.

Delay
Our last transition property is transition-delay. Much like duration, its value is an amount of time. Delay specifies the time to wait before starting the transition. As with the duration property, the default value for transition-delay is 0s, which means no delay.
transition-property: width;
transition-duration: 750ms;
transition-delay: 250ms;
In the example above, a change in the width of the element will start after a quarter of a second, and it will animate over three quarters of a second.


Because these four properties are so frequently declared together, CSS provides a property that can be used to declare them all in one line: transition. This shorthand property describes each aspect of the transition puzzle in a single declaration. The properties must be specified in this order: transition-property, transition-duration, transition-timing-function, transition-delay.
transition: color 1.5s linear 0.5s;

In the example above, we have refactored the four lines of code in the previous example into one concise line. This example will cause any change in text color to transition at constant speed over 1.5 seconds, after a delay of 0.5 seconds.

Leaving out one of the properties causes the default value for that property to be applied. There is one exception: You must set duration if you want to define delay. Since both are time values, the browser will always interpret the first time value it sees as duration.


Media Queries
@media only screen and (max-width: 480px) {
  body {
    font-size: 12px;
  }
}
The example above demonstrates how a media query is applied. The media query defines a rule for screens smaller than 480 pixels (approximately the width of many smartphones in landscape orientation).
Let’s break this example down into its parts:
@media — This keyword begins a media query rule and instructs the CSS compiler on how to parse the rest of the rule.
only screen — Indicates what types of devices should use this rule. In early attempts to target different devices, CSS incorporated different media types (screen, print, handheld). The rationale was that by knowing the media type, the proper CSS rules could be applied. However, “handheld” and “screen” devices began to occupy a much wider range of sizes and having only one CSS rule per media device was not sufficient. screen is the media type always used for displaying content, no matter the type of device. The only keyword is added to indicate that this rule only applies to one media type (screen).
and (max-width : 480px) — This part of the rule is called a media feature, and instructs the CSS compiler to apply the CSS styles to devices with a width of 480 pixels or smaller. Media features are the conditions that must be met in order to render the CSS within a media query.
CSS rules are nested inside of the media query’s curly braces. The rules will be applied when the media query is met. In the example above, the text in the body element is set to a font-size of 12px when the user’s screen is less than 480px.

By using multiple widths and heights, a range can be set for a media query.
@media only screen and (min-width: 320px) and (max-width: 480px) {
    /* ruleset for 320px - 480px */
}
Dots Per Inch (DPI)
Another media feature we can target is screen resolution. Many times we will want to supply higher quality media (images, video, etc.) only to users with screens that can support high resolution media. Targeting screen resolution also helps users avoid downloading high resolution (large file size) images that their screen may not be able to properly display.

To target by resolution, we can use the min-resolution and max-resolution media features. These media features accept a resolution value in either dots 
per inch (dpi) or dots per centimeter (dpc). Learn more about resolution measurements here.
@media only screen and (min-resolution: 300dpi) {
    /* CSS for high resolution screens */
}

And Operator
In previous exercises, we chained multiple media features of the same type in one media query by using the and operator. It allowed us to create a range by using min-width and max-width in the same media query.
The and operator can be used to require multiple media features. Therefore, we can use the and operator to require both a max-width of 480px and to have a min-resolution of 300dpi.
@media only screen and (max-width: 480px) and (min-resolution: 300dpi) {
    /* CSS ruleset */
}

Tablets: The points at which media queries are set are called breakpoints. Breakpoints are the screen sizes at which your web page does not appear properly. For example, if we want to target tablets that are in landscape orientation, we can create the following breakpoint:
@media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
    /* CSS ruleset */
}


Defining Variables
CSS Variables are defined the same way as any other CSS declaration, making them syntactically convenient and easy to remember.

Each variable declaration must begin with a double hyphen (--) followed by the variable name. After the variable name is declared a value can then be assigned to it.

In the example below, we have a variable named --main-header-color with a color value #DADECC assigned to it. Note the double hyphen (--) that is preceding the variable name.
 that is preceding the variable name.

 h1 {
  --main-header-color : #DADECC;
}
Using Variables
Now that we know how to define and initialize CSS variables, let’s learn how to use them. As we saw in the last exercise, when we define variables in place of hardcoded properties, the variable does not immediately take the place of that property’s value.

To use CSS variables as values of properties, we must specify the variable’s name as an argument inside of the var() function. We will learn more about CSS functions in the next lesson.

The var() function allows the specified CSS variable to be used as a value of a property.
h1 {
  --main-background-color: #DADECC;
  background-color: var(--main-background-color);
}

SCOPE!!!
:root {
  --menu-color-blue: blue;
}


CSS FUNCTIONS
In this lesson, we learned about how CSS functions can be used to set background images, perform mathematical calculations, and dynamically set values between minimum and maximum ranges. We also learned about property-specific functions used to set colors, create filters, and transform elements!
Let’s review some of the main point covered in this lesson:

Functions are a type of CSS value that is inserted in place of a hardcoded value on a CSS property
The url() function is used to load resources into the stylesheet.
You can use the calc() function to perform simple mathematical operations on elements.
The min() function can be used to select the smallest value from a range of values and set that value on a property.
The max() function can be used to select the largest value from a range of values and set that value on a property.
You can use the clamp() function to ensure property value scales up and down while staying between an upper and lower bound.
Color values that are fully opaque can be set using the rgb() and hsl() functions.
Color values that need a varying level of alpha can be set using the rgba() and hsla() functions.
You can use filter functions to change the appearance of input images and elements.
The drop-shadow(), blur(), and brightness() functions each perform different kinds of element filtering.
You can use transformation functions to manipulate image positioning, scale, rotation, and more.
The scale(), rotate() and translate() functions each allow for specific kinds of transformation.

























































